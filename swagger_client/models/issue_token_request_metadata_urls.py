# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IssueTokenRequestMetadataUrls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'mime_type': 'str',
        'data_hash': 'str'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'mime_type': 'mimeType',
        'data_hash': 'dataHash'
    }

    def __init__(self, name=None, url=None, mime_type=None, data_hash=None):  # noqa: E501
        """IssueTokenRequestMetadataUrls - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._url = None
        self._mime_type = None
        self._data_hash = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if mime_type is not None:
            self.mime_type = mime_type
        if data_hash is not None:
            self.data_hash = data_hash

    @property
    def name(self):
        """Gets the name of this IssueTokenRequestMetadataUrls.  # noqa: E501

        Name of the URL  # noqa: E501

        :return: The name of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssueTokenRequestMetadataUrls.

        Name of the URL  # noqa: E501

        :param name: The name of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this IssueTokenRequestMetadataUrls.  # noqa: E501

        Actual URL  # noqa: E501

        :return: The url of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssueTokenRequestMetadataUrls.

        Actual URL  # noqa: E501

        :param url: The url of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def mime_type(self):
        """Gets the mime_type of this IssueTokenRequestMetadataUrls.  # noqa: E501

        mimeType of URL content  # noqa: E501

        :return: The mime_type of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this IssueTokenRequestMetadataUrls.

        mimeType of URL content  # noqa: E501

        :param mime_type: The mime_type of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def data_hash(self):
        """Gets the data_hash of this IssueTokenRequestMetadataUrls.  # noqa: E501

        Hash of data at the URL, used for verification  # noqa: E501

        :return: The data_hash of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :rtype: str
        """
        return self._data_hash

    @data_hash.setter
    def data_hash(self, data_hash):
        """Sets the data_hash of this IssueTokenRequestMetadataUrls.

        Hash of data at the URL, used for verification  # noqa: E501

        :param data_hash: The data_hash of this IssueTokenRequestMetadataUrls.  # noqa: E501
        :type: str
        """

        self._data_hash = data_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueTokenRequestMetadataUrls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
